<?php
/**
 * Created by PhpStorm.
 * User: joakim
 * Date: 22/08/16
 * Time: 22:51
 */
declare(strict_types = 1);

namespace Vinnia\Upsales\Test;

use Codeception\TestCase\Test;
use Vinnia\Upsales\Client;

class ClientTest extends Test
{

    /**
     * @var array
     */
    private $env;

    /**
     * @var Client
     */
    private $client;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->env = require __DIR__.'/../../env.php';
        $this->client = Client::make($this->env['accessToken']);
    }

    public function testItShouldLoad1000Clients()
    {
        $this->markTestSkipped('Only takes bandwidth');

        $res = $this->client->getClients();
        $clients = Client::decodeResponse($res);

        codecept_debug($clients);
        $this->assertEquals(1000,count($clients['data']));
    }

    public function testItShouldFindClientByOrgNo()
    {
        $res = $this->client->getClientByOrgNo('556933-9251');
        $clients = Client::decodeResponse($res);
        codecept_debug($clients);
        $this->assertEquals(1, count($clients['metadata']['total']));
    }

    public function testItShouldFindClientByOrgNoWithoutDash()
    {
        $res = $this->client->getClientByOrgNo('5569339251');
        $clients = Client::decodeResponse($res);
        codecept_debug($clients);
        $this->assertEquals(1, count($clients['metadata']['total']));
    }

    public function testItShouldFindClientById()
    {
        $res = $this->client->getClientById('3326');
        $client = Client::decodeResponse($res);
        codecept_debug($client);
        $this->assertEquals('Snille Bemanning AB', $client['data']['name']);
    }

    public function orgNoProvider(): array
    {
        return [
            ['556933-9251', ['5569339251', '556933-9251']],
            ['5569339251', ['5569339251', '556933-9251']],
            ['5569339251_HARAMBE_COOL', ['5569339251', '556933-9251']], // extra stuff at the end works too.
            ['INVALID_NUMBER', []],
        ];
    }

    /**
     * @dataProvider orgNoProvider
     * @param string $toParse
     * @param array $expectedResult
     */
    public function testItShouldGenerateTwoVariationsOfOrgNo(string $toParse, array $expectedResult)
    {
        $variations = Client::getOrgNoVariations($toParse);
        $this->assertCount(count($expectedResult), $variations);

        foreach ($expectedResult as $num) {
            $this->assertContains($num, $variations);
        }
    }

}
